@using System.Threading.Tasks
@using Microsoft.AspNetCore.Routing
@model PagedVideoList
@{
    ViewData["Title"] = "Video Group";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="~/css/MyYouTube.css">
<script type="text/javascript" src="~/lib/jquery/dist/jquery.js"></script>
<script>
    var toggleStatus = "only";
    function toggleWatched() {
        switch (toggleStatus) {
            case "show":
                $("li").filter(".watched").css("display", "inline-block");
                $("li").filter(".unwatched").css("display", "inline-block");
                $("#toggleWatchedButton").html("Showing All Videos");
                toggleStatus = "only";
                break;
            case "only":
                $("li").filter(".watched").css("display", "inline-block");
                $("li").filter(".unwatched").css("display", "none");
                $("#toggleWatchedButton").html("Showing Watched Videos");
                toggleStatus = "hide";
                break;
            case "hide":
                $("li").filter(".watched").css("display", "none");
                $("li").filter(".unwatched").css("display", "inline-block");
                $("#toggleWatchedButton").html("Showing Unwatched Videos");
                toggleStatus = "show";
                break;
        }
        function checkAllBoxes() {
            $(".check-box").prop('checked',
                $(this).prop('checked'));
        }
        $(document).ready(function () {
            $("#checkAll").click(checkAllBoxes);
        });
    }
</script>
<h2 style="margin-top: 20px;margin-bottom: 10px;">Video Group</h2>
<dl class="dl-horizontal">
    <dt>Videos Watched:</dt>
    <dd>
        @{ var unwatched = Model.TotalCount - Model.TotalWatchedCount;}
        @Model.TotalWatchedCount/@Model.TotalCount (@unwatched unwatched)
    </dd>
</dl>
@{/*Html.ActionLink("Save this group.", "SaveUserGroup", "Videos",FormMethod.Post, new RouteValueDictionary { { "channelId", Model.ChannelId }, { "groupingTemplate", Model.Grouping }, { "groupName", Model.Grouping }})*/}
@using (Html.BeginForm("SaveUserGroup", "Videos"))
{
    @Html.HiddenFor(m => m.ChannelId)
    @Html.HiddenFor(m => m.Grouping)
    <input type="text" name="groupName" value="@Model.Grouping" />
}
<br />
@Html.ActionLink("Mark all as watched.", "MarkGroupAsWatched", "Videos", new RouteValueDictionary { { "channelId", Model.ChannelId }, { "grouping", Model.Grouping } })
<button id="toggleWatchedButton" onclick="toggleWatched()">Showing All Videos</button>
@using (Html.BeginForm())
{
    <input type="submit" style="float:right" value="Save Changes" />
    <input type="checkbox" id="checkAll" />
    @await Html.PartialAsync("~/Views/Shared/Pagination.cshtml", new PaginationViewModel("Group", "Videos", Model.PageIndex, Model.TotalPage, 
    new RouteValueDictionary { { "channelId", Model.ChannelId }, { "grouping", Model.Grouping } }))
    <div id="video-grid-holder" class="grid-holder">
        <ul id="channels-browse-content-grid" class="channels-browse-content-grid branded-page-gutter-padding grid-lockups-container">
            @for (int i = 0; i < Model.Count; i++)
                {
                <li class="@("channels-content-item yt-shelf-grid-item" + (Model[i].Watched ? " watched" : " unwatched"))">
                    <div class="yt-lockup clearfix yt-lockup-grid">
                        <div class="yt-lockup-dismissable">
                            <div class="yt-lockup-thumbnail">
                                <span class="spf-link ux-thumb-wrap contains-addto">
                                    <a href="@Model[i].VideoURL" class="yt-uix-sessionlink" aria-hidden="true">
                                        <span class="video-thumb  yt-thumb yt-thumb-196">
                                            <span class="yt-thumb-default">
                                                <span class="yt-thumb-clip">
                                                    <img alt="" aria-hidden="true" width="196" src="@Model[i].ThumbnailUrl">
                                                    <span class="vertical-align"></span>
                                                </span>
                                            </span>
                                        </span>
                                    </a>
                                    <span class="video-time" aria-hidden="true">
                                        <span aria-label="@Model[i].Duration">@Model[i].DisplayDuration</span>
                                    </span>
                                    <span class="yt-uix-button-arrow yt-sprite"></span>
                                </span>
                            </div>
                            <div class="yt-lockup-content">
                                <h3 class="yt-lockup-title">
                                    <a class="yt-uix-sessionlink yt-uix-tile-link  spf-link  yt-ui-ellipsis yt-ui-ellipsis-2" dir="ltr" title="@Model[i].Title" href="@Model[i].VideoURL">@Model[i].Title</a>
                                    <span class="accessible-description">- Duration: @Model[i].DisplayDuration</span>
                                </h3>
                                <div class="yt-lockup-meta">
                                    @Html.ActionLink(Model[i].ChannelTitle, "Details", "Channels", new RouteValueDictionary { { "Id", Model[i].ChannelId } })
                                    <ul class="yt-lockup-meta-info">
                                        <li>
                                            @Html.HiddenFor(m => m[i].Id)
                                        @Html.ActionLink("Details", "Details", "Videos", new RouteValueDictionary { { "Id", Model[i].Id } })
                                    </li>
                                    <li>@Model[i].TimeSince</li>
                                    <li>@Html.EditorFor(m => m[i].Watched)</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </li>
            }
        </ul>
    </div>
    @await Html.PartialAsync("~/Views/Shared/Pagination.cshtml", new PaginationViewModel("Group", "Videos", Model.PageIndex, Model.TotalPage,
    new RouteValueDictionary { { "channelId", Model.ChannelId }, { "grouping", Model.Grouping } }))
    <input type="submit" style="float:right" value="Save Changes" />
}
